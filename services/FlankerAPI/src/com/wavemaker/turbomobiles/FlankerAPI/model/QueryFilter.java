/*
 * flanker_dbService Swagger Documentation
 * Swagger API documentation for flanker_db
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.wavemaker.turbomobiles.FlankerAPI.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
/**
 * QueryFilter
 */

public class QueryFilter {
  @JsonProperty("attributeValue")
  private Object attributeValue = null;

  /**
   * Gets or Sets attributeType
   */
  public enum AttributeTypeEnum {
    BIG_DECIMAL("BIG_DECIMAL"),
    BIG_INTEGER("BIG_INTEGER"),
    BLOB("BLOB"),
    BOOLEAN("BOOLEAN"),
    BYTE("BYTE"),
    CALENDAR("CALENDAR"),
    CALENDAR_DATE("CALENDAR_DATE"),
    CHARACTER("CHARACTER"),
    CLOB("CLOB"),
    CURRENCY("CURRENCY"),
    DATE("DATE"),
    DOUBLE("DOUBLE"),
    FLOAT("FLOAT"),
    INTEGER("INTEGER"),
    LONG("LONG"),
    LOCALE("LOCALE"),
    STRING("STRING"),
    SHORT("SHORT"),
    TEXT("TEXT"),
    TIME("TIME"),
    DATETIME("DATETIME"),
    TIMESTAMP("TIMESTAMP"),
    TIMEZONE("TIMEZONE"),
    TRUE_FALSE("TRUE_FALSE"),
    YES_NO("YES_NO");

    private String value;

    AttributeTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AttributeTypeEnum fromValue(String input) {
      for (AttributeTypeEnum b : AttributeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("attributeType")
  private AttributeTypeEnum attributeType = null;

  /**
   * Gets or Sets filterCondition
   */
  public enum FilterConditionEnum {
    STARTING_WITH("STARTING_WITH"),
    ENDING_WITH("ENDING_WITH"),
    CONTAINING("CONTAINING"),
    EQUALS("EQUALS"),
    NOT_EQUALS("NOT_EQUALS"),
    BETWEEN("BETWEEN"),
    LESS_THAN("LESS_THAN"),
    LESS_THAN_OR_EQUALS("LESS_THAN_OR_EQUALS"),
    GREATER_THAN("GREATER_THAN"),
    GREATER_THAN_OR_EQUALS("GREATER_THAN_OR_EQUALS"),
    NULL("NULL"),
    EMPTY("EMPTY"),
    LIKE("LIKE"),
    IN("IN"),
    NULL_OR_EMPTY("NULL_OR_EMPTY"),
    IS("IS");

    private String value;

    FilterConditionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FilterConditionEnum fromValue(String input) {
      for (FilterConditionEnum b : FilterConditionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("filterCondition")
  private FilterConditionEnum filterCondition = null;

  @JsonProperty("attributeName")
  private String attributeName = null;

  public QueryFilter attributeValue(Object attributeValue) {
    this.attributeValue = attributeValue;
    return this;
  }

   /**
   * Get attributeValue
   * @return attributeValue
  **/
  public Object getAttributeValue() {
    return attributeValue;
  }

  public void setAttributeValue(Object attributeValue) {
    this.attributeValue = attributeValue;
  }

  public QueryFilter attributeType(AttributeTypeEnum attributeType) {
    this.attributeType = attributeType;
    return this;
  }

   /**
   * Get attributeType
   * @return attributeType
  **/
  public AttributeTypeEnum getAttributeType() {
    return attributeType;
  }

  public void setAttributeType(AttributeTypeEnum attributeType) {
    this.attributeType = attributeType;
  }

  public QueryFilter filterCondition(FilterConditionEnum filterCondition) {
    this.filterCondition = filterCondition;
    return this;
  }

   /**
   * Get filterCondition
   * @return filterCondition
  **/
  public FilterConditionEnum getFilterCondition() {
    return filterCondition;
  }

  public void setFilterCondition(FilterConditionEnum filterCondition) {
    this.filterCondition = filterCondition;
  }

  public QueryFilter attributeName(String attributeName) {
    this.attributeName = attributeName;
    return this;
  }

   /**
   * Get attributeName
   * @return attributeName
  **/
  public String getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryFilter QueryFilter = (QueryFilter) o;
    return Objects.equals(this.attributeValue, QueryFilter.attributeValue) &&
        Objects.equals(this.attributeType, QueryFilter.attributeType) &&
        Objects.equals(this.filterCondition, QueryFilter.filterCondition) &&
        Objects.equals(this.attributeName, QueryFilter.attributeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeValue, attributeType, filterCondition, attributeName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryFilter {\n");
    
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("    attributeType: ").append(toIndentedString(attributeType)).append("\n");
    sb.append("    filterCondition: ").append(toIndentedString(filterCondition)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
