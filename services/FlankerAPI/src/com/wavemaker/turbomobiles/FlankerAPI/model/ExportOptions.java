/*
 * flanker_dbService Swagger Documentation
 * Swagger API documentation for flanker_db
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.wavemaker.turbomobiles.FlankerAPI.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
/**
 * ExportOptions
 */

public class ExportOptions {
  @JsonProperty("exportSize")
  private Integer exportSize = null;

  @JsonProperty("fileName")
  private String fileName = null;

  /**
   * Gets or Sets exportType
   */
  public enum ExportTypeEnum {
    EXCEL("EXCEL"),
    CSV("CSV");

    private String value;

    ExportTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ExportTypeEnum fromValue(String input) {
      for (ExportTypeEnum b : ExportTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("exportType")
  private ExportTypeEnum exportType = null;

  @JsonProperty("fields")
  private List<FieldInfo> fields = null;

  public ExportOptions exportSize(Integer exportSize) {
    this.exportSize = exportSize;
    return this;
  }

   /**
   * Get exportSize
   * @return exportSize
  **/
  public Integer getExportSize() {
    return exportSize;
  }

  public void setExportSize(Integer exportSize) {
    this.exportSize = exportSize;
  }

  public ExportOptions fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public ExportOptions exportType(ExportTypeEnum exportType) {
    this.exportType = exportType;
    return this;
  }

   /**
   * Get exportType
   * @return exportType
  **/
  public ExportTypeEnum getExportType() {
    return exportType;
  }

  public void setExportType(ExportTypeEnum exportType) {
    this.exportType = exportType;
  }

  public ExportOptions fields(List<FieldInfo> fields) {
    this.fields = fields;
    return this;
  }

  public ExportOptions addFieldsItem(FieldInfo fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  public List<FieldInfo> getFields() {
    return fields;
  }

  public void setFields(List<FieldInfo> fields) {
    this.fields = fields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportOptions ExportOptions = (ExportOptions) o;
    return Objects.equals(this.exportSize, ExportOptions.exportSize) &&
        Objects.equals(this.fileName, ExportOptions.fileName) &&
        Objects.equals(this.exportType, ExportOptions.exportType) &&
        Objects.equals(this.fields, ExportOptions.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportSize, fileName, exportType, fields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportOptions {\n");
    
    sb.append("    exportSize: ").append(toIndentedString(exportSize)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    exportType: ").append(toIndentedString(exportType)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
